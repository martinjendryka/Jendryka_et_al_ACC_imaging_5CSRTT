function varlist = Arrangebehavior(thisdatalist,varlist,thispath_scope)
varlist.ts = cell(1,size(thisdatalist,1));
varlist.dt = cell(1,size(thisdatalist,1));

for thisses = 1:size(thisdatalist,1)
    casig = varlist.casig{thisses};

    % Specify range and delimiter
    opts = delimitedTextImportOptions("NumVariables", 3);
    opts.DataLines = [6, Inf];
    opts.Delimiter = ",";
    opts.VariableTypes = ["double", "double", "string"];
    thisdt = readtable(thisdatalist{thisses,5},opts);
    %%% check if table begins with "start"
    if ~strcmp(thisdt.Var3(1),"start")
        error('first line of thisdt is not "start"')
    end

    thisdt.Var3 = cellstr(thisdt.Var3);

    % first column not required
    thisdt = thisdt(:,2:3);

    % dt.EventTime in ms
    thisdt.Properties.VariableNames = {'Eventtime','Eventname'};

    % %%%%%%% 2. add timestamp from dat file to each session %%%%%%%%%%%%%%%%
    % for recordings using old DAQ software (with v3 miniscope) use dat File generated by DAQ box as time vector [in
    % msec]
    thisdir = thisdatalist{thisses,1};
    newdir = ['timestamp',char(extractBetween(thisdir,'traces','.')),'.dat'];
    filename = fullfile(thispath_scope,thisdatalist{1,4},newdir);
    if ~exist(filename) % in case of v4 miniscope
        newdir = ['timestamp',char(extractBetween(thisdir,'traces','.')),'.csv'];
        filename = fullfile(thispath_scope,thisdatalist{1,4},newdir);
        sysclock = 2;% column which has the times of the frames (different from v3 miniscope)
    else
        sysclock = 3; % column which has the times of the frames (in v3 miniscope)
    end
    daqfile = readtable(filename);

    dattime = daqfile{:,sysclock};

    % get droppedframes !!!
    ifi = 200; %[ms], ifi = interframe interval, based on frame rate

    % downsample to 5Hz !!!
    dattime = dattime(1:4:end);

    % check if dattime and casig have same size
    ntimestamps = numel(dattime);
    nframes = size(casig,2);

    if ntimestamps>nframes %
        disp(strcat(thisdatalist(thisses),strfile))
        disp(dattime(nframes))
        error('more frames in datFile than frames in imaging file')
    end

    droppedframes = Getdroppedframes(varlist,thisses,dattime,ifi);
    if ~isempty(droppedframes)
        newdattime = sort([dattime;droppedframes.timestamps]); % dattime with additional timestamps for dropped frames
        newcasig = casig;
        n = 0;
        for i = 1:numel(droppedframes.ind)
            s = newcasig(:,1:droppedframes.ind(i)+n); % signal before frames dropped
            e = newcasig(:,droppedframes.ind(i)+1+n:end); % signal after frames dropped
            % frames of created timestamps are filled with the average of the former and later frame
            newval = mean([s(:,end),e(:,1)],2);
            newval = repmat(newval,1,droppedframes.n(i));
            newcasig = [s,newval,e];
            disp(['number of artificial frames created in session' varlist.animalnames{thisses} ' ' varlist.expdate{thisses} ': ' num2str(droppedframes.n(i))])
            % add nan for created timestamps
            %             newcasig = [s,nan(numcells,droppedframes.n(i)),e];
            n = n + droppedframes.n(i);
        end
        casig = newcasig;
        dattime= newdattime;
    end

    ntimestamps = numel(dattime);
    nframes = size(casig,2);

    % check if frames are equal to timestamps in dattime !!!
    if ntimestamps>nframes %
        disp(strcat(thisdatalist(thisses),strfile))
        disp(dattime(nframes))
        error('more frames in datFile than frames in imaging file') % this mustnt happen after frames were artificially added
    elseif ntimestamps<nframes % if true, frames were sampled without saving their timestamps, these challenges are on notice during the analysis
        disp(strcat(thisdatalist(thisses),strfile))
        disp(nframes)
        disp('more frames in imaging file than in datFile')
        disp('truncated accordingly')
    end

    varlist.ts(thisses) = {dattime};
    varlist.casig{thisses}= casig;

    % delete rows with unrequired strings
    unwantedstrs = {'5_poke_entries';'receptacle_entries';'choice_task';'attempts_dur_penalty';...
        'iti_1';'iti_2';'iti_3';'iti_4';'Event Closing'};
    thisdt(ismember(thisdt.Eventname,unwantedstrs),:) = [];
    varlist.dt(thisses) = {thisdt};

end
end