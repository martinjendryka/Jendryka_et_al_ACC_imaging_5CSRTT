explist = {'cb800ms','cbDeval1','cbExt1','cbExt2'};
thisexpname = explist{1};
loadmatname = 'getVars_4sbf7saf'; % mat file of descr Analysis

dpath = Choosesavedir('outputvars');
dpath = fullfile(dpath, 'getVars', thisexpname);
load(fullfile(dpath, [loadmatname '_' thisexpname '.mat'])) %

thisarea=1;
animalselect = find(ismember(infovar.brainareas,Params.brainareas(thisarea)));
animals = infovar.animals(animalselect);
dpath = Choosesavedir('outputvars');
dpath = fullfile(dpath, 'regressAnalysis' ,thisexpname); % where mat files are stored
mkdir(dpath)

for otherexp_idx = 2:numel(explist)
    otherexp = explist{otherexp_idx};
    dpath = Choosesavedir('outputvars');

    dpath = fullfile(dpath, 'getVars', otherexp);
    beh_otherexp = load(fullfile(dpath, [loadmatname '_' otherexp '.mat']),'beh');
    infovar_otherexp = load(fullfile(dpath, [loadmatname '_' otherexp '.mat']),'infovar');
    selectanimals = find(ismember(infovar_otherexp.infovar.brainareas,Params.brainareas(thisarea)));
    numevents_otherexp_ACC = floor(mean(beh_otherexp.beh.numevents(:,selectanimals),2));
    numpokes_otherexp_ACC = floor(mean(beh_otherexp.beh.pokesnum(:,:,selectanimals),3));

    matexportname = ['regressAnalysis_', extractAfter(loadmatname,'_'),'_dsTo_',otherexp];
    
    %cpd_thisses = cell(Params.sampling_iterations,numel(animals));
    cpd_thisses = cell(2,numel(animals));

    for thisses = 1:numel(animals)   % FOR LOOP START through each session

        eventlist= eventlistAll(thisses);
        eventepochs = eventepochsAll{thisses};
        numevents = beh.numevents(:,thisses);
        pokes = beh.pokes(:,thisses);
        numpokes = beh.pokesnum(:,:,thisses);
        numcells = ncells(thisses);
        setlabel = repelem(Params.trialtypes',numevents); % repeats trialtypes names corresponding to event number (if 0 will be not repeated)

        for i = 1:2%Params.sampling_iterations

            %%% downsample to match other challenge
            [eventepochs_ds,numevents_ds,pokes_ds,numpokes_ds] =  Downsample_events_to_match_other(Params,eventepochs,numevents,pokes,numpokes,numevents_otherexp_ACC,numpokes_otherexp_ACC);

            %%% Linear regression
            [thisx,thisy,Params,labels] = MakeRegressset(Params,eventepochs_ds,numevents_ds,pokes_ds); % get input data for regression

            if any(numevents(3)<=2) % if there are not enough omissions, model will be rank deficient due to activePoke predictor
                fprintf('%s %d out of %d not enough omissions \n',animals{thisses},thisses,numel(animals))
                continue
            end

            %%% Run Regression
            cpd_thisses{i,thisses} =  LinearRegressPredmerged(thisx,thisy,Params,numcells,labels,epochtype);

            fprintf('ses %d: %d out of %d iterations finished \n',thisses,i,Params.sampling_iterations)

        end
        fprintf('%s %d out of %d finished \n',animals{thisses},thisses,numel(animals))

    end %   FOR LOOP END through each session

    regressvar.cpd = cpd_thisses;
    save(fullfile(dpath ,[matexportname '_' thisexpname '.mat']),'Params','regressvar');
    fprintf('Experiment %s done \n',thisexpname)
    clearvars -except loadmatname explist epochtype
end